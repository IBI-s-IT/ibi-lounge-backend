import ical, { ICalAlarmType, ICalEventBusyStatus } from "ical-generator";
import { getSchedules } from "../schedules/getSchedules";
import { getRaspDate, startEndOfYear } from "../shared/date";

export async function getCalendar(query: URLSearchParams) {
  const [start, end] = startEndOfYear();
  query.set("dateStart", getRaspDate(start));
  query.set("dateEnd", getRaspDate(end));

  const data = await getSchedules(query);

  if (!("response" in data) || data.response.length === 0) {
    throw new Error("no_data");
  }

  const calendar = ical({ name: "–£—á—ë–±–∞" });

  data.response.map((day) => {
    day.lessons.map((lesson) => {
      const event = calendar.createEvent({
        start: lesson.time_start,
        end: lesson.time_end,
        summary: lesson.text,
      });

      let description = "";

      if (lesson?.additional?.type) {
        switch (lesson.additional.type) {
          case "lecture":
            description += `üìñ –õ–µ–∫—Ü–∏—è\n`;
            break;
          case "practice":
            description += `üíª –ü—Ä–∞–∫—Ç–∏–∫–∞\n`;
            break;
          case "project_work":
            description += `üî® –ü—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n`;
            break;
          case "library_day":
            description += `üìö –ë–∏–±–ª–∏–æ—Ç–µ—á–Ω—ã–π –¥–µ–Ω—å\n`;
            break;
          case "subject_report":
            description += `‚ö†Ô∏è –ó–∞—á—ë—Ç\n`;
            break;
          case "exam":
            description += `üö® –≠–∫–∑–∞–º–µ–Ω\n`;
            break;
          case "consultation":
            description += `‚ÑπÔ∏è –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è`;
            break;
          case "subject_report_with_grade":
            description += `‚ö†Ô∏è –î–∏—Ñ. –∑–∞—á—ë—Ç`;
            break;
          default:
            description += `‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è\n`;
        }
      }

      if (lesson?.additional?.is_online) {
        event.busystatus(ICalEventBusyStatus.FREE);
        const alarm = event.createAlarm();
        alarm.type(ICalAlarmType.display);
        alarm.triggerBefore(60 * 15);
        description += `üåé–û–Ω–ª–∞–π–Ω –∑–∞–Ω—è—Ç–∏–µ\n`;

        if (lesson?.additional?.url) {
          event.location(lesson.additional.url);
        }
      } else if (lesson?.additional?.location) {
        event.location(lesson.additional.location);
        description += `üó∫Ô∏è –ú–µ—Å—Ç–æ: ${lesson.additional.location}\n`;
        const alarm = event.createAlarm();
        alarm.type(ICalAlarmType.display);
        alarm.triggerBefore(3600 * 2);
      }

      if (lesson?.additional?.subgroup) {
        description += `üë• –ü–æ–¥–≥—Ä—É–ø–ø–∞: ${lesson.additional.subgroup}\n`;
      }

      if (lesson?.additional?.teacher_name) {
        description += `üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ${lesson.additional.teacher_name}`;
      }

      event.description(description);
    });
  });

  return calendar.toString();
}
