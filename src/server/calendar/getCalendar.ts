import ical, { ICalAlarmType, ICalEventBusyStatus } from 'ical-generator';
import { getSchedules } from '../schedules/getSchedules';
import { getRaspDate, startEndOfYear } from '@shared/date';
import { CalendarQuery } from '@server/calendar/types';

export async function getCalendar(query: CalendarQuery) {
  const [start, end] = startEndOfYear();
  const schedulesQuery = {
    dateStart: getRaspDate(start),
    dateEnd: getRaspDate(end),
    group: query.group,
  };

  const data = await getSchedules(schedulesQuery);

  if (!('response' in data) || data.response.length === 0) {
    throw new Error('no_data');
  }

  const calendar = ical({ name: '–£—á—ë–±–∞' });

  data.response.map((day) => {
    day.lessons.map((lesson) => {
      const event = calendar.createEvent({
        start: new Date(
          start.getFullYear(),
          Number(day.month) - 1,
          Number(day.day),
          Number(lesson.time_start.split(':')[0]),
          Number(lesson.time_start.split(':')[1])
        ),
        end: new Date(
          start.getFullYear(),
          Number(day.month) - 1,
          Number(day.day),
          Number(lesson.time_end.split(':')[0]),
          Number(lesson.time_end.split(':')[1])
        ),
        summary: lesson.text,
      });

      let description = '';

      if (lesson?.additional?.type) {
        switch (lesson.additional.type) {
          case 'lecture':
            description += `üìñ –õ–µ–∫—Ü–∏—è\n`;
            break;
          case 'practice':
            description += `üíª –ü—Ä–∞–∫—Ç–∏–∫–∞\n`;
            break;
          case 'project_work':
            description += `üî® –ü—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n`;
            break;
          case 'library_day':
            description += `üìö –ë–∏–±–ª–∏–æ—Ç–µ—á–Ω—ã–π –¥–µ–Ω—å\n`;
            break;
          case 'subject_report':
            description += `‚ö†Ô∏è –ó–∞—á—ë—Ç\n`;
            break;
          case 'exam':
            description += `üö® –≠–∫–∑–∞–º–µ–Ω\n`;
            break;
          case 'consultation':
            description += `‚ÑπÔ∏è –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è`;
            break;
          case 'subject_report_with_grade':
            description += `‚ö†Ô∏è –î–∏—Ñ. –∑–∞—á—ë—Ç`;
            break;
          default:
            description += `‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è\n`;
        }
      }

      if (lesson?.additional?.is_online) {
        event.busystatus(ICalEventBusyStatus.FREE);
        event.createAlarm({
          type: ICalAlarmType.display,
          trigger: 60 * 15,
        });
        description += `üåé–û–Ω–ª–∞–π–Ω –∑–∞–Ω—è—Ç–∏–µ\n`;

        if (lesson?.additional?.url) {
          event.location(lesson.additional.url);
        }
      } else if (lesson?.additional?.location) {
        event.location(lesson.additional.location);
        description += `üó∫Ô∏è –ú–µ—Å—Ç–æ: ${lesson.additional.location}\n`;
        event.createAlarm({
          type: ICalAlarmType.display,
          trigger: 3600 * 2,
        });
      }

      if (lesson?.additional?.subgroup) {
        description += `üë• –ü–æ–¥–≥—Ä—É–ø–ø–∞: ${lesson.additional.subgroup}\n`;
      }

      if (lesson?.additional?.teacher_name) {
        description += `üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ${lesson.additional.teacher_name}`;
      }

      event.description(description);
    });
  });

  return calendar.toString();
}
